<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>&lt;p&gt;This command:&lt;/p&gt;&#xd;
&lt;ol&gt;&#xd;
  &lt;li&gt;Checks out the branch you&apos;ve asked for (overwriting any previous build for that branch/repo combination)&lt;/li&gt;&#xd;
  &lt;li&gt;Runs the ./build.sh script from that branch with the correct arguments&lt;/li&gt;&#xd;
  &lt;li&gt;Creates a new repository for you (or removes all packages from any existing repository)&lt;/li&gt;&#xd;
  &lt;li&gt;Imports the built packages&lt;/li&gt;&#xd;
&lt;/ol&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>branch_name</name>
          <description>The name of the branch within the CKAN repository that you wish to build.</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repo_name</name>
          <description>The name of the repository that you want the packages added to. It will appear at http://apt.ckan.org/&lt;repo_name&gt;. 
WARNING: The old repository will be deleted as part of the build so be careful which name you use.</description>
          <defaultValue>ckan-current-dev</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>package_version</name>
          <description>A bumped version number for &lt;em&gt;all&lt;/em&gt; the packages built. (Is added as +0001 at the end of the package version)

Leave blank for the build number to be used automatically, otherwise, this should be a number strictly greater than the previous $package_version for the given $repo_name value.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ubuntu_release</name>
          <description>The ubuntu release</description>
          <defaultValue>precise</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector"/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/sh

if [ -z $package_version ] ; then
    package_version=$BUILD_NUMBER
fi

LEADING_PACKAGE_VERSION=`printf &apos;%08d&apos; $package_version`

echo &quot;Building $branch_name to repo $repo_name ( $LEADING_PACKAGE_VERSION )&quot;
echo &quot;Running as `whoami`.&quot;
echo &quot;Running in $WORKSPACE&quot;
echo &quot;Ubuntu release: $ubuntu_release&quot;

BRANCH=$branch_name
REPO_NAME=$repo_name
CKAN_PACKAGE_VERSION=$LEADING_PACKAGE_VERSION
DEPS_PACKAGE_VERSION=$LEADING_PACKAGE_VERSION

REPOS=&quot;$WORKSPACE/repos&quot;
CHECKOUT=&quot;$REPOS/$BRANCH-$REPO_NAME&quot;

echo &quot;REPOS=$REPOS&quot;
echo &quot;CHECKOUT=$CHECKOUT&quot;

if [ ! -e &quot;$REPOS&quot; ] ; then
    mkdir -p &quot;$REPOS&quot;
fi

if [ -e &quot;$CHECKOUT&quot; ] ; then
    echo -n &quot;Removing previous checkout: $CHECKOUT ... &quot;
    rm -rf &quot;$CHECKOUT&quot;
    echo &quot;done.&quot;
fi


echo &quot;Cloning the $BRANCH branch ...&quot;
mkdir -p &quot;$CHECKOUT&quot;
git clone -b &quot;$BRANCH&quot; https://github.com/okfn/ckan.git &quot;$CHECKOUT&quot;
echo &quot;done.&quot;

echo &quot;Building the packages ...&quot;
cd &quot;$CHECKOUT&quot;
echo &quot;Working In: $PWD&quot;
chmod +x build.sh
./build.sh &quot;$CKAN_PACKAGE_VERSION&quot; &quot;$DEPS_PACKAGE_VERSION&quot; &quot;$ubuntu_release&quot;
echo &quot;done.&quot;

echo &quot;Packages created, now adding them to the repo...&quot;
BUILDKIT_REPO_KEY=&quot;$WORKSPACE/buildkit/key&quot;
BUILDKIT_REPO_BASE=&quot;$WORKSPACE/buildkit/repo&quot;
BUILDKIT_REPO=&quot;$BUILDKIT_REPO_BASE/$REPO_NAME&quot;
# Add the .debs to the repository and the export the latest files for upload
if [ ! -e &quot;$BUILDKIT_REPO&quot; ] ; then
    echo &quot;Cloining the base_lucid repository to $BUILDKIT_REPO ...&quot;
    buildkit repo --key=&quot;$BUILDKIT_REPO_KEY&quot; --base-repo-dir=&quot;$BUILDKIT_REPO_BASE&quot; clone &quot;base_${ubuntu_release}&quot; $REPO_NAME
    echo &quot;done.&quot;
else
    echo &quot;Removing all packages from the existing $BUILDKIT_REPO repo ...&quot;
    buildkit repo --key=&quot;$BUILDKIT_REPO_KEY&quot; --base-repo-dir=&quot;$BUILDKIT_REPO_BASE&quot; remove --ubuntu-release &quot;$ubuntu_release&quot; -a $REPO_NAME
    echo &quot;done.&quot;
fi
echo &quot;Adding the packages to the $REPO_NAME repo using files in $PWD/dist/buildkit/*.deb ...&quot;
buildkit repo --key=&quot;$BUILDKIT_REPO_KEY&quot; --base-repo-dir=&quot;$BUILDKIT_REPO_BASE&quot; add --ubuntu-release &quot;$ubuntu_release&quot; $REPO_NAME dist/buildkit/*.deb
echo &quot;done.&quot;

echo &quot;Cleaning debs from previous build&quot;
rm dist/buildkit/*.deb

echo &quot;Building the lucid packages&quot;
cd &quot;$CHECKOUT&quot;
echo &quot;Working In: $PWD&quot;
chmod +x build.sh
./build.sh &quot;$CKAN_PACKAGE_VERSION&quot; &quot;$DEPS_PACKAGE_VERSION&quot; &quot;lucid&quot;
echo &quot;done.&quot;

echo &quot;Adding the packages to the $REPO_NAME repo using files in $PWD/dist/buildkit/*.deb ...&quot;
buildkit repo --key=&quot;$BUILDKIT_REPO_KEY&quot; --base-repo-dir=&quot;$BUILDKIT_REPO_BASE&quot; add --ubuntu-release lucid $REPO_NAME dist/buildkit/*.deb
echo &quot;done.&quot;</command>
    </hudson.tasks.Shell>
    <hudson.plugins.python.Python>
      <command>&quot;&quot;&quot;
Recursivly generates an index.html listings file for all directories under the
current working directory.
&quot;&quot;&quot;

import os
import time

WORKSPACE = os.environ.get(&apos;WORKSPACE&apos;)
if not WORKSPACE:
    print &quot;Cannot run wiith $WORKSPACE environment variable set&quot;
    exit(1)

REPO_BASE = os.path.abspath(os.path.join(WORKSPACE, &apos;buildkit&apos;, &apos;repo&apos;))

def main():
    print &quot;Creating index.html listings&quot;
    create_listing([REPO_BASE])

def create_listing(directories):
    if not directories:
        return
    d = directories.pop()
    print &apos;Creating index.html for &quot;%s&quot;&apos; % d
    files = [ f for f in os.listdir(d) if f != &apos;index.html&apos; ]
    files.sort()


    listings = []
    for name in files:
        path = os.path.abspath(os.path.join(d,name))
        is_dir = os.path.isdir(path)

        if is_dir:
            directories.append(path)

        data = dict(
            href = name+&apos;/&apos; if is_dir else name,
            date = time.strftime(&apos;%d-%b-%Y %H:%M&apos;, time.gmtime(os.path.getmtime(path))),
            size = os.path.getsize(path) if not is_dir else &apos;-&apos;
        )

        listings.append(LIST_ITEM_TEMPLATE % data)

    data = dict(
        directory_name = d[len(REPO_BASE):] + &apos;/&apos;,
        listings = &apos;\n&apos;.join(listings)
    )

    file_contents = FILE_TEMPLATE % data

    f_out = open(os.path.join(d, &apos;index.html&apos;), &apos;w&apos;)
    f_out.write(file_contents)
    f_out.flush()
    f_out.close()

    create_listing(directories)

LIST_ITEM_TEMPLATE = &apos;&lt;a href=&quot;%(href)s&quot;&gt;%(href)s&lt;/a&gt;\t%(date)s\t%(size)s&apos;
FILE_TEMPLATE = &quot;&quot;&quot;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Index of %(directory_name)s&lt;/title&gt;&lt;/head&gt;
&lt;body bgcolor=&quot;white&quot;&gt;
&lt;h1&gt;Index of %(directory_name)s&lt;/h1&gt;&lt;hr&gt;&lt;pre&gt;
&lt;a href=&quot;../&quot;&gt;../&lt;/a&gt;
%(listings)s
&lt;/pre&gt;&lt;hr&gt;&lt;/body&gt;
&lt;/html&gt;
&quot;&quot;&quot;

if __name__ == &apos;__main__&apos;:
    main()</command>
    </hudson.plugins.python.Python>
    <hudson.tasks.Shell>
      <command>#!/bin/sh

BUILDKIT_REPO_BASE=&quot;$WORKSPACE/buildkit/repo&quot;

echo &quot;Local repository layout updated.  Now uploading to S3...&quot;
s3cmd --no-encrypt -r --delete-removed --acl-public --rexclude=&apos;^[^/]*/(db|conf)/.*&apos; sync &quot;$BUILDKIT_REPO_BASE/&quot; s3://apt.ckan.org
echo &quot;Done.&quot;</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>